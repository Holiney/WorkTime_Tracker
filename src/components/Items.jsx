// import Item from "./Item";

// function Items({ items, setItems, onRemove }) {
//   const togglePaid = (id) => {
//     setItems((prevItems) =>
//       prevItems.map((item) =>
//         item.id === id ? { ...item, isPaid: !item.isPaid } : item
//       )
//     );
//   };

//   // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—é—á–∞ —Ç–∏–∂–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ "–ú—ñ—Å—è—Ü—å X, –¢–∏–∂–¥–µ–Ω—å Y"
//   const getWeekKey = (date) => {
//     const monthNames = [
//       "–°—ñ—á–µ–Ω—å",
//       "–õ—é—Ç–∏–π",
//       "–ë–µ—Ä–µ–∑–µ–Ω—å",
//       "–ö–≤—ñ—Ç–µ–Ω—å",
//       "–¢—Ä–∞–≤–µ–Ω—å",
//       "–ß–µ—Ä–≤–µ–Ω—å",
//       "–õ–∏–ø–µ–Ω—å",
//       "–°–µ—Ä–ø–µ–Ω—å",
//       "–í–µ—Ä–µ—Å–µ–Ω—å",
//       "–ñ–æ–≤—Ç–µ–Ω—å",
//       "–õ–∏—Å—Ç–æ–ø–∞–¥",
//       "–ì—Ä—É–¥–µ–Ω—å",
//     ];
//     const month = monthNames[date.getMonth()]; // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—è—Ü—è

//     // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –º—ñ—Å—è—Ü—è
//     const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
//     const firstMonday =
//       firstDayOfMonth.getDay() === 1
//         ? firstDayOfMonth
//         : new Date(
//             date.getFullYear(),
//             date.getMonth(),
//             1 + ((8 - firstDayOfMonth.getDay()) % 7)
//           );

//     // –û–±—á–∏—Å–ª—é—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é –≤ –¥–Ω—è—Ö –º—ñ–∂ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é —Ç–∞ –ø–µ—Ä—à–∏–º –ø–æ–Ω–µ–¥—ñ–ª–∫–æ–º
//     const daysSinceFirstMonday = Math.floor(
//       (date - firstMonday) / (1000 * 60 * 60 * 24)
//     );

//     // –ù–æ–º–µ—Ä —Ç–∏–∂–Ω—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 1
//     const weekNumber = Math.floor(daysSinceFirstMonday / 7) + 1;

//     return `${month}, –¢–∏–∂–¥–µ–Ω—å ${weekNumber}`;
//   };

//   // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ —Ç–∏–∂–Ω—è—Ö
//   const groupItemsByWeek = (items) => {
//     const grouped = {};

//     // –°–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–æ –¥–∞—Ç—ñ –ø–µ—Ä–µ–¥ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è–º
//     const sortedItems = [...items].sort((a, b) => {
//       const dateA = new Date(
//         a.date.split(".").reverse().join("-") + `-${new Date().getFullYear()}`
//       );
//       const dateB = new Date(
//         b.date.split(".").reverse().join("-") + `-${new Date().getFullYear()}`
//       );
//       return dateB - dateA;
//     });

//     sortedItems.forEach((item) => {
//       const date = new Date(
//         item.date.split(".").reverse().join("-") +
//           `-${new Date().getFullYear()}`
//       );
//       const weekKey = getWeekKey(date);

//       if (!grouped[weekKey]) {
//         grouped[weekKey] = [];
//       }
//       grouped[weekKey].push(item);
//     });

//     return grouped;
//   };

//   const groupedItems = groupItemsByWeek(items);

//   return (
//     <ul className="space-y-4">
//       {Object.entries(groupedItems).map(([weekKey, weekItems]) => (
//         <div key={weekKey}>
//           <h3 className="font-medium ">{weekKey}</h3>
//           {weekItems.map((item) => (
//             <Item
//               key={item.id}
//               {...item}
//               onRemove={onRemove}
//               onTogglePaid={togglePaid}
//             />
//           ))}
//         </div>
//       ))}
//     </ul>
//   );
// }

// export default Items;
import { useState } from "react";
import Item from "./Item";

function Items({ items, setItems, onRemove }) {
  const [activeTab, setActiveTab] = useState("unpaid"); // üëà –í–∫–ª–∞–¥–∫–∏ (–æ–ø–ª–∞—á–µ–Ω—ñ/–Ω–µ–æ–ø–ª–∞—á–µ–Ω—ñ)

  const togglePaid = (id) => {
    setItems((prevItems) =>
      prevItems.map((item) =>
        item.id === id ? { ...item, isPaid: !item.isPaid } : item
      )
    );
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—é—á–∞ —Ç–∏–∂–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ "–ú—ñ—Å—è—Ü—å X, –¢–∏–∂–¥–µ–Ω—å Y"
  const getWeekKey = (date) => {
    const monthNames = [
      "–°—ñ—á–µ–Ω—å",
      "–õ—é—Ç–∏–π",
      "–ë–µ—Ä–µ–∑–µ–Ω—å",
      "–ö–≤—ñ—Ç–µ–Ω—å",
      "–¢—Ä–∞–≤–µ–Ω—å",
      "–ß–µ—Ä–≤–µ–Ω—å",
      "–õ–∏–ø–µ–Ω—å",
      "–°–µ—Ä–ø–µ–Ω—å",
      "–í–µ—Ä–µ—Å–µ–Ω—å",
      "–ñ–æ–≤—Ç–µ–Ω—å",
      "–õ–∏—Å—Ç–æ–ø–∞–¥",
      "–ì—Ä—É–¥–µ–Ω—å",
    ];
    const month = monthNames[date.getMonth()];

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –º—ñ—Å—è—Ü—è
    const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
    const firstMonday =
      firstDayOfMonth.getDay() === 1
        ? firstDayOfMonth
        : new Date(
            date.getFullYear(),
            date.getMonth(),
            1 + ((8 - firstDayOfMonth.getDay()) % 7)
          );

    // –û–±—á–∏—Å–ª—é—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é –≤ –¥–Ω—è—Ö –º—ñ–∂ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é —Ç–∞ –ø–µ—Ä—à–∏–º –ø–æ–Ω–µ–¥—ñ–ª–∫–æ–º
    const daysSinceFirstMonday = Math.floor(
      (date - firstMonday) / (1000 * 60 * 60 * 24)
    );

    // –ù–æ–º–µ—Ä —Ç–∏–∂–Ω—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 1
    const weekNumber = Math.floor(daysSinceFirstMonday / 7) + 1;

    return `${month}, –¢–∏–∂–¥–µ–Ω—å ${weekNumber}`;
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ —Ç–∏–∂–Ω—è—Ö
  const groupItemsByWeek = (items) => {
    const grouped = {};

    // –°–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–æ –¥–∞—Ç—ñ (–Ω–æ–≤—ñ –≤–≥–æ—Ä—ñ)
    const sortedItems = [...items].sort((a, b) => {
      const dateA = new Date(
        a.date.split(".").reverse().join("-") + `-${new Date().getFullYear()}`
      );
      const dateB = new Date(
        b.date.split(".").reverse().join("-") + `-${new Date().getFullYear()}`
      );
      return dateB - dateA;
    });

    sortedItems.forEach((item) => {
      const date = new Date(
        item.date.split(".").reverse().join("-") +
          `-${new Date().getFullYear()}`
      );
      const weekKey = getWeekKey(date);

      if (!grouped[weekKey]) {
        grouped[weekKey] = [];
      }
      grouped[weekKey].push(item);
    });

    return grouped;
  };

  const groupedUnpaidItems = groupItemsByWeek(
    items.filter((item) => !item.isPaid)
  );
  const groupedPaidItems = groupItemsByWeek(
    items.filter((item) => item.isPaid)
  );

  return (
    <div className="px-4">
      {/* üîπ –í–∫–ª–∞–¥–∫–∏ */}
      <div className="flex mb-4 border-b border-gray-300">
        <button
          className={`px-1 py-1 w-1/2 ${
            activeTab === "unpaid"
              ? "border-b-2 border-blue-500 font-bold"
              : "text-gray-500"
          }`}
          onClick={() => setActiveTab("unpaid")}
        >
          –ù–µ –æ–ø–ª–∞—á–µ–Ω–µ ({Object.keys(groupedUnpaidItems).length})
        </button>
        <button
          className={`px-1 py-1 w-1/2 ${
            activeTab === "paid"
              ? "border-b-4 border-green-500 font-bold"
              : "text-gray-500"
          }`}
          onClick={() => setActiveTab("paid")}
        >
          –û–ø–ª–∞—á–µ–Ω–µ ({Object.keys(groupedPaidItems).length})
        </button>
      </div>

      {/* üîπ –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
      <ul className="space-y-4">
        {activeTab === "unpaid" &&
          Object.entries(groupedUnpaidItems).map(([weekKey, weekItems]) => (
            <div key={weekKey}>
              <h3 className="font-medium">{weekKey}</h3>
              {weekItems.map((item) => (
                <Item
                  key={item.id}
                  {...item}
                  onRemove={onRemove}
                  onTogglePaid={togglePaid}
                />
              ))}
            </div>
          ))}

        {activeTab === "paid" &&
          Object.entries(groupedPaidItems).map(([weekKey, weekItems]) => (
            <div key={weekKey}>
              <h3 className="font-medium">{weekKey}</h3>
              {weekItems.map((item) => (
                <Item
                  key={item.id}
                  {...item}
                  onRemove={onRemove}
                  onTogglePaid={togglePaid}
                />
              ))}
            </div>
          ))}

        {/* üîπ –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —É –≤–∏–±—Ä–∞–Ω—ñ–π –≤–∫–ª–∞–¥—Ü—ñ */}
        {activeTab === "unpaid" &&
          Object.keys(groupedUnpaidItems).length === 0 && (
            <p className="text-gray-500 text-center">‚úÖ –£—Å—ñ –∑–∞–ø–∏—Å–∏ –æ–ø–ª–∞—á–µ–Ω—ñ!</p>
          )}
        {activeTab === "paid" && Object.keys(groupedPaidItems).length === 0 && (
          <p className="text-gray-500 text-center">
            ‚ùå –û–ø–ª–∞—á–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.
          </p>
        )}
      </ul>
    </div>
  );
}

export default Items;
